
Регистры общего назначения:

  целые	вещественные
(2 байта)	(4 байта)
ah			eax
bh			ebx
ch			ecx
dh			edx
eh			eex

sp	- указатель на вершину стека целых чисел
esp   -  указатель на вершину стека вещественных чисел
pc	- указатель на текущую команду

Команды:

mov 1 ah

1 - что кладём
eax - куда кладём
1, 10, 23 - обычные числа
1.0, 5.3, 4.2 - дробные числа
ah, bh, ch - обычные регистры
eax, efx - вещественные регистры
%1, %10, %3 - абсолютные адреса (берем из памяти)
%ah, %bh, %ch - обращение по адресу, записанному в регистре (только для целых регистров)


add 4 eh
аргументы - простые числа, вещественные числа, простые регистры, вещественные регистры
4 - на сколько увеличиваем (числа или регистры из которых брать числа)
eh - что увеличиваем (регистры)

sub 6 dh
аргументы - простые числа, вещественные числа, простые регистры, вещественные регистры
То же самое, только уменьшаем

mul ch
аргументы - простые числа, вещественные числа, простые регистры, вещественные регистры
умножает регистр ax на аргумент (результат в регистр ax ил eax)
аргумент может быть числом или регистром

div fh
аргументы - простые числа, вещественные числа, простые регистры, вещественные регистры
делит регистр ax на аргумент. Остаток от деления в eh
аргументы числа или регистры

label:
метка, может иметь любое имя

jmp 31
jmp label
переход выполнения на метку
аргументы числа или метки

cmp ah 10
сравнение двух аргументов
аргументы - простые числа, вещественные числа, простые регистры, вещественные регистры
если равно, заносит 0 в eh
если первый аргумент больше заносит 1 в eh
если второй аргумент больше заносит 2 в eh

je label
прыжок если в eh 0 (числа равны)

jg label
прыжок если в eh 1 (первый аргумент больше)

jl label
прыжок если в eh 2 (первый аргумент меньше)

push ch
аргументы - простые числа, вещественные числа, простые регистры, вещественные регистры
положить значение из ch в стэк

pop bh
аргументы - простые числа, вещественные числа, простые регистры, вещественные регистры
извлечь значение из стэка в bh

pass
пустая команда без аргументов

int 10
прерывания
аргументы - цел_числа



Команды занимают:			1 байт
Номера (названия) регистров:		1 байт
Целые числа занимают:			2 байта
Дробные числа:				4 байта

Список прерываний:

10 - выход из программы
11 - вывод числа из регистра ah на экран
12 - вывод числа из регистра eax на экран
13 - ввод числа в регистр ah (с клавиатуры)
14 - ввод числа в регистр eax (с клавиатуры)
15 - вывод текста на экран, лежащего по адресу из регистра ah, длиной bh
16 - ввод текста с клавиатуры в память по адресу из ah. В bh будет лежать длина введенного текста
17 - остановка программы пока пользователь не нажмет продолжить (для отладки)


Обозначения регистров:
Регистры обозначаются номером, занимают 1 байт:
0 - ah
1 - bh
2 - ch
3 - dh
4 - eh
5 - sp
6 - pc
7 - rh
0 - eax
1 - ebx
2 - ecx
3 - edx
4 - eex
5 - esp

Байт-коды команд:

1 mov цел_число цел_регистр
2 mov цел_число память
3 mov цел_число память_из_регистра

4 mov дроб_число дроб_регистр
5 mov дроб_число память
6 mov дроб_число память_из_регистра

7 mov цел_регистр цел_регистр
8 mov цел_регистр память
9 mov цел_регистр память_из_регистра

10 mov дроб_регистр дроб_регистр
11 mov дроб_регистр память
12 mov дроб_регистр память_из_регистра

13 mov память цел_регистр
14 mov память дроб_регистр
15 mov память_из_регистра цел_регистр
16 mov память_из_регистра дроб_регистр

17 mov цел_регистр дроб_регистр
18 mov дроб_регистр цел_регистр

19 pass (пустая команда)

20 int (прерывание, аргумент - цел_число)

22 add цел_число цел_регистр
23 add цел_регистр цел_регистр
24 add дроб_число дроб_регистр
25 add дроб_регистр дроб_регистр

26 sub цел_число цел_регистр
27 sub цел_регистр цел_регистр
28 sub дроб_число дроб_регистр
29 sub дроб_регистр дроб_регистр

30 mul цел_число цел_регистр
31 mul цел_регистр цел_регистр
32 mul дроб_число дроб_регистр
33 mul дроб_регистр дроб_регистр

34 div цел_число цел_регистр
35 div цел_регистр цел_регистр
36 div дроб_число дроб_регистр
37 div дроб_регистр дроб_регистр

